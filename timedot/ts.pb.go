// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ts.proto

/*
Package timedot is a generated protocol buffer package.

It is generated from these files:
	ts.proto

It has these top-level messages:
	Timedot
	TimedotSave
	TimedotDelete
	Record
*/
package timedot

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Timedot struct {
	Year        int32 `protobuf:"varint,1,opt,name=year" json:"year,omitempty"`
	Month       int32 `protobuf:"varint,2,opt,name=month" json:"month,omitempty"`
	Date        int32 `protobuf:"varint,3,opt,name=date" json:"date,omitempty"`
	Hour        int32 `protobuf:"varint,4,opt,name=hour" json:"hour,omitempty"`
	Minute      int32 `protobuf:"varint,5,opt,name=minute" json:"minute,omitempty"`
	Second      int32 `protobuf:"varint,6,opt,name=second" json:"second,omitempty"`
	Microsecond int32 `protobuf:"varint,7,opt,name=microsecond" json:"microsecond,omitempty"`
}

func (m *Timedot) Reset()                    { *m = Timedot{} }
func (m *Timedot) String() string            { return proto.CompactTextString(m) }
func (*Timedot) ProtoMessage()               {}
func (*Timedot) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Timedot) GetYear() int32 {
	if m != nil {
		return m.Year
	}
	return 0
}

func (m *Timedot) GetMonth() int32 {
	if m != nil {
		return m.Month
	}
	return 0
}

func (m *Timedot) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *Timedot) GetHour() int32 {
	if m != nil {
		return m.Hour
	}
	return 0
}

func (m *Timedot) GetMinute() int32 {
	if m != nil {
		return m.Minute
	}
	return 0
}

func (m *Timedot) GetSecond() int32 {
	if m != nil {
		return m.Second
	}
	return 0
}

func (m *Timedot) GetMicrosecond() int32 {
	if m != nil {
		return m.Microsecond
	}
	return 0
}

type TimedotSave struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *TimedotSave) Reset()                    { *m = TimedotSave{} }
func (m *TimedotSave) String() string            { return proto.CompactTextString(m) }
func (*TimedotSave) ProtoMessage()               {}
func (*TimedotSave) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TimedotSave) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type TimedotDelete struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Count   uint64 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *TimedotDelete) Reset()                    { *m = TimedotDelete{} }
func (m *TimedotDelete) String() string            { return proto.CompactTextString(m) }
func (*TimedotDelete) ProtoMessage()               {}
func (*TimedotDelete) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TimedotDelete) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *TimedotDelete) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type Record struct {
	TopicKey string     `protobuf:"bytes,1,opt,name=topicKey" json:"topicKey,omitempty"`
	TopicId  string     `protobuf:"bytes,2,opt,name=topicId" json:"topicId,omitempty"`
	Time     []*Timedot `protobuf:"bytes,3,rep,name=Time,json=time" json:"Time,omitempty"`
	Value    string     `protobuf:"bytes,4,opt,name=value" json:"value,omitempty"`
}

func (m *Record) Reset()                    { *m = Record{} }
func (m *Record) String() string            { return proto.CompactTextString(m) }
func (*Record) ProtoMessage()               {}
func (*Record) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Record) GetTopicKey() string {
	if m != nil {
		return m.TopicKey
	}
	return ""
}

func (m *Record) GetTopicId() string {
	if m != nil {
		return m.TopicId
	}
	return ""
}

func (m *Record) GetTime() []*Timedot {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *Record) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*Timedot)(nil), "timedot.Timedot")
	proto.RegisterType((*TimedotSave)(nil), "timedot.TimedotSave")
	proto.RegisterType((*TimedotDelete)(nil), "timedot.TimedotDelete")
	proto.RegisterType((*Record)(nil), "timedot.Record")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TimeFS service

type TimeFSClient interface {
	CreateTimedot(ctx context.Context, in *Record, opts ...grpc.CallOption) (*TimedotSave, error)
	ReadTimedot(ctx context.Context, in *Record, opts ...grpc.CallOption) (TimeFS_ReadTimedotClient, error)
	DeleteTimedot(ctx context.Context, in *Record, opts ...grpc.CallOption) (*TimedotDelete, error)
}

type timeFSClient struct {
	cc *grpc.ClientConn
}

func NewTimeFSClient(cc *grpc.ClientConn) TimeFSClient {
	return &timeFSClient{cc}
}

func (c *timeFSClient) CreateTimedot(ctx context.Context, in *Record, opts ...grpc.CallOption) (*TimedotSave, error) {
	out := new(TimedotSave)
	err := grpc.Invoke(ctx, "/timedot.TimeFS/CreateTimedot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeFSClient) ReadTimedot(ctx context.Context, in *Record, opts ...grpc.CallOption) (TimeFS_ReadTimedotClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TimeFS_serviceDesc.Streams[0], c.cc, "/timedot.TimeFS/ReadTimedot", opts...)
	if err != nil {
		return nil, err
	}
	x := &timeFSReadTimedotClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TimeFS_ReadTimedotClient interface {
	Recv() (*Record, error)
	grpc.ClientStream
}

type timeFSReadTimedotClient struct {
	grpc.ClientStream
}

func (x *timeFSReadTimedotClient) Recv() (*Record, error) {
	m := new(Record)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *timeFSClient) DeleteTimedot(ctx context.Context, in *Record, opts ...grpc.CallOption) (*TimedotDelete, error) {
	out := new(TimedotDelete)
	err := grpc.Invoke(ctx, "/timedot.TimeFS/DeleteTimedot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TimeFS service

type TimeFSServer interface {
	CreateTimedot(context.Context, *Record) (*TimedotSave, error)
	ReadTimedot(*Record, TimeFS_ReadTimedotServer) error
	DeleteTimedot(context.Context, *Record) (*TimedotDelete, error)
}

func RegisterTimeFSServer(s *grpc.Server, srv TimeFSServer) {
	s.RegisterService(&_TimeFS_serviceDesc, srv)
}

func _TimeFS_CreateTimedot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Record)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeFSServer).CreateTimedot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timedot.TimeFS/CreateTimedot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeFSServer).CreateTimedot(ctx, req.(*Record))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeFS_ReadTimedot_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Record)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TimeFSServer).ReadTimedot(m, &timeFSReadTimedotServer{stream})
}

type TimeFS_ReadTimedotServer interface {
	Send(*Record) error
	grpc.ServerStream
}

type timeFSReadTimedotServer struct {
	grpc.ServerStream
}

func (x *timeFSReadTimedotServer) Send(m *Record) error {
	return x.ServerStream.SendMsg(m)
}

func _TimeFS_DeleteTimedot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Record)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeFSServer).DeleteTimedot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timedot.TimeFS/DeleteTimedot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeFSServer).DeleteTimedot(ctx, req.(*Record))
	}
	return interceptor(ctx, in, info, handler)
}

var _TimeFS_serviceDesc = grpc.ServiceDesc{
	ServiceName: "timedot.TimeFS",
	HandlerType: (*TimeFSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTimedot",
			Handler:    _TimeFS_CreateTimedot_Handler,
		},
		{
			MethodName: "DeleteTimedot",
			Handler:    _TimeFS_DeleteTimedot_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadTimedot",
			Handler:       _TimeFS_ReadTimedot_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ts.proto",
}

func init() { proto.RegisterFile("ts.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 331 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xc1, 0x6a, 0xc2, 0x40,
	0x10, 0x86, 0x4d, 0x8d, 0x89, 0x4e, 0x90, 0x96, 0x41, 0x64, 0xf1, 0x24, 0x4b, 0xa1, 0x9e, 0xa4,
	0xe8, 0xa5, 0xf4, 0xd2, 0x43, 0x4b, 0xa1, 0xf4, 0xb6, 0xf6, 0x05, 0xd2, 0xcd, 0x80, 0x01, 0x93,
	0x95, 0x64, 0x23, 0xd8, 0x77, 0xea, 0xa9, 0x2f, 0x58, 0x66, 0x37, 0x4a, 0x09, 0xd8, 0xdb, 0xfc,
	0xdf, 0xfe, 0x33, 0xfb, 0xef, 0x24, 0x30, 0xb4, 0xf5, 0x72, 0x5f, 0x19, 0x6b, 0x30, 0xb6, 0x79,
	0x41, 0x99, 0xb1, 0xf2, 0x3b, 0x80, 0xf8, 0xc3, 0xd7, 0x88, 0x10, 0x1e, 0x29, 0xad, 0x44, 0x30,
	0x0f, 0x16, 0x03, 0xe5, 0x6a, 0x9c, 0xc0, 0xa0, 0x30, 0xa5, 0xdd, 0x8a, 0x2b, 0x07, 0xbd, 0x60,
	0x67, 0x96, 0x5a, 0x12, 0x7d, 0xef, 0xe4, 0x9a, 0xd9, 0xd6, 0x34, 0x95, 0x08, 0x3d, 0xe3, 0x1a,
	0xa7, 0x10, 0x15, 0x79, 0xd9, 0x58, 0x12, 0x03, 0x47, 0x5b, 0xc5, 0xbc, 0x26, 0x6d, 0xca, 0x4c,
	0x44, 0x9e, 0x7b, 0x85, 0x73, 0x48, 0x8a, 0x5c, 0x57, 0xa6, 0x3d, 0x8c, 0xdd, 0xe1, 0x5f, 0x24,
	0xef, 0x20, 0x69, 0xe3, 0x6e, 0xd2, 0x03, 0xa1, 0x80, 0xb8, 0x6e, 0xb4, 0xa6, 0xba, 0x76, 0xa9,
	0x87, 0xea, 0x24, 0xe5, 0x13, 0x8c, 0x5b, 0xe3, 0x0b, 0xed, 0xc8, 0xfe, 0x63, 0xe5, 0x37, 0x6a,
	0xd3, 0x94, 0xd6, 0xbd, 0x31, 0x54, 0x5e, 0xc8, 0x2f, 0x88, 0x14, 0x69, 0x53, 0x65, 0x38, 0x83,
	0xa1, 0x35, 0xfb, 0x5c, 0xbf, 0xd3, 0xd1, 0xb5, 0x8e, 0xd4, 0x59, 0xf3, 0x54, 0x57, 0xbf, 0x65,
	0xae, 0x7b, 0xa4, 0x4e, 0x12, 0x6f, 0x21, 0xe4, 0x00, 0xa2, 0x3f, 0xef, 0x2f, 0x92, 0xd5, 0xcd,
	0xb2, 0xdd, 0xf8, 0xb2, 0x4d, 0xa5, 0x42, 0x06, 0x7c, 0xf7, 0x21, 0xdd, 0x35, 0xe4, 0xd6, 0x36,
	0x52, 0x5e, 0xac, 0x7e, 0x02, 0x88, 0xd8, 0xf7, 0xba, 0xc1, 0x07, 0x18, 0x3f, 0x57, 0x94, 0x5a,
	0x3a, 0x7d, 0xa5, 0xeb, 0xf3, 0x24, 0x1f, 0x6f, 0x36, 0xe9, 0x8e, 0xe6, 0xcd, 0xc8, 0x1e, 0xae,
	0x21, 0x51, 0x94, 0x66, 0x17, 0xfb, 0xba, 0x40, 0xf6, 0xee, 0x03, 0x7c, 0x84, 0xb1, 0xdf, 0xd7,
	0xc5, 0xb6, 0x69, 0xf7, 0x3a, 0xef, 0x97, 0xbd, 0xcf, 0xc8, 0xfd, 0x5b, 0xeb, 0xdf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xfb, 0x8d, 0x75, 0xfd, 0x67, 0x02, 0x00, 0x00,
}
